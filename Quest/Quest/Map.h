#pragma once
#include <vector>
#include <fstream>
#include <string>

#include "enum.h"
#include "GameObject.h"

using namespace std;
//---------------------------------------------------------------------------------------
class Map
{
	vector<vector<MapCell>> field;/* = {"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
										"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", };*/

	Map(int width = MapCoord::width, int height = MapCoord::height) : width(width), height(height)
	{
		field.resize(height);
		for (int i = 0; i < height; i++)
		{
			field[i].resize(width);
		}

		ifstream map("Map/map.txt", ios::binary);
		string buffer;
		while (map) { getline(map, buffer); }

		int index = 0;
		char temp[30][90];
		for (int i = 0; i < 30; i++)
		{
			for (int j = 0; j < 90; j++, index++)
			{
				temp[i][j] = buffer[index];
			}
		}

		for (int i = 0; i < height; i++)
		{
			for (int j = 0; j < width; j++)
			{
				int code = rand() % 10;
				if (temp[i][j] == 0)
					field[i][j] = MapCell::Empty;
				else if (temp[i][j] == 1)
					field[i][j] = MapCell::Wall;
			}
		}
	}
public:
	const int width;
	const int height;

	static Map& get()
	{
		static Map INSTANCE;
		return INSTANCE;
	}

	MapCell getCell(int x, int y)
	{
		if (x >= 0 && x < height && y >= 0 && y < width)
			return field[x][y];
		else
			return MapCell::Wall;
	}
};